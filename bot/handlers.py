from typing import Final
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, filters, ContextTypes
)
from dotenv import load_dotenv
import os
from rag.langchain_pipeline import answer_query
from tools.ocr_reader import extract_text_from_image
from tools.voice_handler import voice_handler
from tools.reminder_handler import add_reminder_command, list_reminders, cancel_all_reminders
import tempfile

load_dotenv()
TOKEN = os.getenv('TOKEN')
BOT_USERNAME: Final = os.getenv('BOT_USERNAME')

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã ‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ bilingual ‡¶î‡¶∑‡¶ß ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶¨‡¶ü‡•§ ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø ‡¶¨‡¶æ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡¶æ‡¶∑‡¶æ‡¶Ø‡¶º ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®, ‡¶î‡¶∑‡¶ß‡ßá‡¶∞ ‡¶õ‡¶¨‡¶ø ‡¶¨‡¶æ ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        """‚ùì ‡¶Ü‡¶™‡¶®‡¶ø ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®:
- What is Paracetamol?
- ‡¶∏‡ßá‡¶ï‡ßç‡¶≤‡ßã‡¶∞ ‡¶™‡¶æ‡¶∞‡ßç‡¶∂‡ßç‡¶¨‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ï‡ßÄ?
- ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶î‡¶∑‡¶ß‡ßá‡¶∞ ‡¶õ‡¶¨‡¶ø ‡¶¨‡¶æ ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡¶ø‡¶®‡•§"""
    )

def handle_response(text: str) -> str:
    try:
        return answer_query(text)
    except Exception as e:
        print("‚ùå handle_response error:", e)
        return "‚ö†Ô∏è ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡¶®‡¶ø‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    response = handle_response(text)
    await update.message.reply_text(response)

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        voice = update.message.voice
        file = await voice.get_file()

        temp_ogg = tempfile.NamedTemporaryFile(delete=False, suffix='.ogg')
        await file.download_to_drive(temp_ogg.name)
        temp_ogg.close()

        recognized_text, detected_lang = voice_handler.speech_to_text(temp_ogg.name, return_lang=True)
        os.unlink(temp_ogg.name)

        if not recognized_text:
            await update.message.reply_text("‚ùå ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶≠‡ßü‡ßá‡¶∏ ‡¶¨‡ßÅ‡¶ù‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§")
            return

        await update.message.reply_text(f"üéôÔ∏è ‡¶Ü‡¶™‡¶®‡¶ø ‡¶¨‡¶≤‡ßá‡¶õ‡ßá‡¶®: {recognized_text}")
        answer = handle_response(recognized_text)
        await update.message.reply_text(f"üìù ‡¶â‡¶§‡ßç‡¶§‡¶∞:\n{answer}")

        # Language-specific voice answer
        tts_path = voice_handler.text_to_speech(answer, language=detected_lang)
        if tts_path and os.path.exists(tts_path):
            with open(tts_path, 'rb') as voice_file:
                await update.message.reply_voice(voice=voice_file)
            os.unlink(tts_path)
        else:
            await update.message.reply_text("‚ö†Ô∏è ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§")

    except Exception as e:
        print(f"‚ùå Voice handling error: {e}")
        await update.message.reply_text("‚ö†Ô∏è ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")

# OCR Handler (unchanged except minor tweaks)
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        photo = update.message.photo[-1]
        file = await photo.get_file()

        file_path = f"temp_{update.message.chat.id}.jpg"
        await file.download_to_drive(file_path)

        ocr_text = extract_text_from_image(file_path)
        os.remove(file_path)

        if not ocr_text:
            await update.message.reply_text("‚ö†Ô∏è ‡¶ï‡ßã‡¶® ‡¶≤‡ßá‡¶ñ‡¶æ ‡¶™‡¶°‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü ‡¶õ‡¶¨‡¶ø ‡¶¶‡¶ø‡¶®‡•§")
            return

        context.user_data['ocr_text'] = ocr_text

        keyboard = [
            [InlineKeyboardButton("üáßüá© ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ", callback_data='lang_ben')],
            [InlineKeyboardButton("üá¨üáß English", callback_data='lang_eng')],
        ]
        await update.message.reply_text(
            f"üßæ OCR ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü:\n{ocr_text}\n\nüåê ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßã‡¶® ‡¶≠‡¶æ‡¶∑‡¶æ‡ßü ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡ßá‡¶§‡ßá ‡¶ö‡¶æ‡¶®?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        print(f"‚ùå Error in handle_photo: {e}")
        await update.message.reply_text("‚ö†Ô∏è ‡¶õ‡¶¨‡¶ø ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

# Language & Query Selection (unchanged)
async def handle_language_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    lang_code = query.data.replace('lang_', '')
    context.user_data['lang'] = lang_code

    keyboard = [
        [InlineKeyboardButton("üíä General Info / ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶§‡¶•‡ßç‡¶Ø", callback_data='query_general')],
        [InlineKeyboardButton("‚ö†Ô∏è Side Effects / ‡¶™‡¶æ‡¶∞‡ßç‡¶∂‡ßç‡¶¨‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ", callback_data='query_side_effects')],
        [InlineKeyboardButton("üìò Usage / ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶®‡¶ø‡ßü‡¶Æ", callback_data='query_usage')],
        [InlineKeyboardButton("üß¨ Pharmacology / ‡¶´‡¶æ‡¶∞‡ßç‡¶Æ‡¶æ‡¶ï‡ßã‡¶≤‡¶ú‡¶ø", callback_data='query_pharmacology')],
        [InlineKeyboardButton("üë∂ Pediatric Use / ‡¶∂‡¶ø‡¶∂‡ßÅ‡¶¶‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞", callback_data='query_pediatric')],
    ]
    await query.edit_message_text(
        "üîç ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßã‡¶® ‡¶§‡¶•‡ßç‡¶Ø ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶® ‡¶§‡¶æ ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_query_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    ocr_text = context.user_data.get('ocr_text', '')
    lang = context.user_data.get('lang', 'eng')

    if not ocr_text:
        await query.edit_message_text("‚ö†Ô∏è OCR ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶õ‡¶¨‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§")
        return

    prompts = {
        'general': {'eng': "What is this medicine?", 'ben': "‡¶è‡¶á ‡¶ì‡¶∑‡ßÅ‡¶ß‡¶ü‡¶ø ‡¶ï‡ßÄ?"},
        'side_effects': {'eng': "What are the side effects of this medicine?", 'ben': "‡¶è‡¶á ‡¶ì‡¶∑‡ßÅ‡¶ß‡ßá‡¶∞ ‡¶™‡¶æ‡¶∞‡ßç‡¶∂‡ßç‡¶¨‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ï‡ßÄ?"},
        'usage': {'eng': "How is this medicine used?", 'ben': "‡¶è‡¶á ‡¶ì‡¶∑‡ßÅ‡¶ß‡¶ü‡¶ø ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º?"},
        'pharmacology': {'eng': "Describe the pharmacology of this medicine.", 'ben': "‡¶è‡¶á ‡¶ì‡¶∑‡ßÅ‡¶ß‡ßá‡¶∞ ‡¶´‡¶æ‡¶∞‡ßç‡¶Æ‡¶æ‡¶ï‡ßã‡¶≤‡¶ú‡¶ø‡¶ï‡¶æ‡¶≤ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£ ‡¶¶‡¶ø‡¶®‡•§"},
        'pediatric': {'eng': "What is the pediatric usage of this medicine?", 'ben': "‡¶∂‡¶ø‡¶∂‡ßÅ‡¶¶‡ßá‡¶∞ ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá ‡¶è‡¶á ‡¶ì‡¶∑‡ßÅ‡¶ß‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡ßá‡¶Æ‡¶®?"},
    }

    prompt = prompts[query.data.replace('query_', '')][lang]
    full_query = f"{prompt}\n\n{ocr_text}"

    try:
        response = answer_query(full_query)
    except Exception as e:
        print("‚ùå Error:", e)
        response = "‚ö†Ô∏è ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§"

    await query.message.reply_text(f"üîç {prompt}\n\n{response}")

async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"‚ö†Ô∏è Error: {context.error}")

if __name__ == '__main__':
    print("ü§ñ Bot is starting...")
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler('start', start_command))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CommandHandler('remind', add_reminder_command))
    application.add_handler(CommandHandler('list_reminders', list_reminders))
    application.add_handler(CommandHandler('cancel_reminders', cancel_all_reminders))

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    application.add_handler(CallbackQueryHandler(handle_language_selection, pattern='^lang_'))
    application.add_handler(CallbackQueryHandler(handle_query_selection, pattern='^query_'))
    application.add_error_handler(error)

    print("‚úÖ Bot is running with full voice + reminder support")
    application.run_polling(poll_interval=3)
